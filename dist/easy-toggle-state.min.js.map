{"version":3,"sources":["easy-toggle-state.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","document","ATTR_CLASS","ATTR_GROUP","ATTR_EVENT","ATTR_OUTSIDE","retrieveTargets","element","hasAttribute","querySelectorAll","getAttribute","parentElement","retrieveGroupState","group","activeGroupElements","concat","forEach","groupElement","isToggleActive","push","documentEventHandler","event","target","closest","manageGroup","manageToggle","addEventListener","triggerOffHandler","targetElement","manageTriggerOutside","console","error","removeEventListener","manageTarget","triggerElement","setAttribute","triggerOffList","triggerOff","indexOf","className","classList","toggle","targetElements","manageActiveByDefault","contains","add","init","trigger","preventDefault","triggerEscElements","window","key","keyCode","onLoad","initEasyToggleState"],"mappings":"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","file":"easy-toggle-state.min.js","sourcesContent":["/*\n\t-------------------------------------------------------------------\n\teasy-toggle-state\n\tA tiny JavaScript plugin to toggle the state of any HTML element in most of contexts with ease.\n\n\t@version v1.0.0\n\t@link https://github.com/Twikito/easy-toggle-state#readme\n\t@license MIT : https://github.com/Twikito/easy-toggle-state/blob/master/LICENSE\n\t-------------------------------------------------------------------\n*/\n\n'use strict';\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n(function (document) {\n\n\tvar TOGGLE_CLASS_PREFIX = 'toggle-'; // Prefix should end by hyphen\n\n\tvar ATTR_CLASS = 'data-' + TOGGLE_CLASS_PREFIX + 'class',\n\t    ATTR_TARGET_ALL = 'data-' + TOGGLE_CLASS_PREFIX + 'target-all',\n\t    ATTR_TARGET_PARENT = 'data-' + TOGGLE_CLASS_PREFIX + 'target-parent',\n\t    ATTR_TARGET_SELF = 'data-' + TOGGLE_CLASS_PREFIX + 'target-self',\n\t    ATTR_IS_ACTIVE = 'data-' + TOGGLE_CLASS_PREFIX + 'is-active',\n\t    ATTR_GROUP = 'data-' + TOGGLE_CLASS_PREFIX + 'group',\n\t    ATTR_EVENT = 'data-' + TOGGLE_CLASS_PREFIX + 'event',\n\t    ATTR_OUTSIDE = 'data-' + TOGGLE_CLASS_PREFIX + 'outside',\n\t    ATTR_TARGET_ONLY = 'data-' + TOGGLE_CLASS_PREFIX + 'target-only',\n\t    ATTR_ESCAPE = 'data-' + TOGGLE_CLASS_PREFIX + 'escape',\n\t    ATTR_TRIGGER_OFF = 'data-' + TOGGLE_CLASS_PREFIX + 'trigger-off',\n\t    ATTR_TARGET_STATE = 'data-' + TOGGLE_CLASS_PREFIX + 'state';\n\n\tvar ATTR_EXPANDED = 'aria-expanded',\n\t    ATTR_SELECTED = 'aria-selected';\n\n\t// Retrieve all targets of a trigger element\n\tvar retrieveTargets = function retrieveTargets(element) {\n\t\tif (element.hasAttribute(ATTR_TARGET_ALL)) return document.querySelectorAll(element.getAttribute(ATTR_TARGET_ALL));else if (element.hasAttribute(ATTR_TARGET_PARENT)) return element.parentElement.querySelectorAll(element.getAttribute(ATTR_TARGET_PARENT));else if (element.hasAttribute(ATTR_TARGET_SELF)) return element.querySelectorAll(element.getAttribute(ATTR_TARGET_SELF));\n\t\treturn [];\n\t};\n\n\t// Retrieve all active trigger of a group\n\tvar retrieveGroupState = function retrieveGroupState(group) {\n\t\tvar activeGroupElements = [];\n\t\t[].concat(_toConsumableArray(document.querySelectorAll('[' + ATTR_CLASS + '][' + ATTR_GROUP + '=\"' + group + '\"]'))).forEach(function (groupElement) {\n\t\t\tif (groupElement.isToggleActive) activeGroupElements.push(groupElement);\n\t\t});\n\t\treturn activeGroupElements;\n\t};\n\n\t// Toggle off all 'toggle-outside' elements when reproducing specified or click event outside trigger or target elements\n\tvar documentEventHandler = function documentEventHandler(event) {\n\t\tvar target = event.target;\n\n\t\tif (!target.closest('[' + ATTR_TARGET_STATE + '=\"true\"]')) {\n\t\t\t[].concat(_toConsumableArray(document.querySelectorAll('[' + ATTR_CLASS + '][' + ATTR_OUTSIDE + ']'))).forEach(function (element) {\n\t\t\t\tif (element != target && element.isToggleActive) if (element.hasAttribute(ATTR_GROUP)) manageGroup(element);else manageToggle(element);\n\t\t\t});\n\t\t\tif (target.hasAttribute(ATTR_OUTSIDE) && target.isToggleActive) document.addEventListener(target.getAttribute(ATTR_EVENT) || 'click', documentEventHandler, false);\n\t\t}\n\t};\n\n\t// Manage click on 'trigger-off' elements\n\tvar triggerOffHandler = function triggerOffHandler(event) {\n\t\tmanageToggle(event.target.targetElement);\n\t};\n\n\t// Manage event ouside trigger or target elements\n\tvar manageTriggerOutside = function manageTriggerOutside(element) {\n\t\tif (element.hasAttribute(ATTR_OUTSIDE)) {\n\t\t\tif (element.hasAttribute(ATTR_GROUP)) console.error(\"You can't use '\" + ATTR_OUTSIDE + \"' on a grouped trigger\");else {\n\t\t\t\tif (element.isToggleActive) document.addEventListener(element.getAttribute(ATTR_EVENT) || 'click', documentEventHandler, false);else document.removeEventListener(element.getAttribute(ATTR_EVENT) || 'click', documentEventHandler, false);\n\t\t\t}\n\t\t}\n\t};\n\n\t// Manage attributes and events of target elements\n\tvar manageTarget = function manageTarget(targetElement, triggerElement) {\n\t\tif (triggerElement.hasAttribute(ATTR_OUTSIDE)) targetElement.setAttribute(ATTR_TARGET_STATE, triggerElement.isToggleActive);\n\n\t\tvar triggerOffList = targetElement.querySelectorAll('[' + ATTR_TRIGGER_OFF + ']');\n\t\tif (triggerOffList.length > 0) {\n\t\t\tif (triggerElement.isToggleActive) {\n\t\t\t\ttriggerOffList.forEach(function (triggerOff) {\n\t\t\t\t\ttriggerOff.targetElement = triggerElement;\n\t\t\t\t\ttriggerOff.addEventListener('click', triggerOffHandler, false);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\ttriggerOffList.forEach(function (triggerOff) {\n\t\t\t\t\ttriggerOff.removeEventListener('click', triggerOffHandler, false);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\t// Toggle elements of a same group\n\tvar manageGroup = function manageGroup(element) {\n\t\tvar activeGroupElements = retrieveGroupState(element.getAttribute(ATTR_GROUP));\n\n\t\tif (activeGroupElements.length > 0) {\n\t\t\tif (activeGroupElements.indexOf(element) === -1) {\n\t\t\t\tactiveGroupElements.forEach(function (groupElement) {\n\t\t\t\t\tmanageToggle(groupElement);\n\t\t\t\t});\n\t\t\t\tmanageToggle(element);\n\t\t\t}\n\t\t} else {\n\t\t\tmanageToggle(element);\n\t\t}\n\t};\n\n\t// Toggle class and aria on trigger and target elements\n\tvar manageToggle = function manageToggle(element) {\n\t\tvar className = element.getAttribute(ATTR_CLASS);\n\t\telement.isToggleActive = !element.isToggleActive;\n\t\t//console.log(\"toggle to \"+element.isToggleActive);\n\n\t\tif (!element.hasAttribute(ATTR_TARGET_ONLY)) element.classList.toggle(className);\n\n\t\tif (element.hasAttribute(ATTR_EXPANDED)) element.setAttribute(ATTR_EXPANDED, element.isToggleActive);\n\n\t\tif (element.hasAttribute(ATTR_SELECTED)) element.setAttribute(ATTR_SELECTED, element.isToggleActive);\n\n\t\tvar targetElements = retrieveTargets(element);\n\t\tfor (var i = 0; i < targetElements.length; i++) {\n\t\t\ttargetElements[i].classList.toggle(className);\n\t\t\tmanageTarget(targetElements[i], element);\n\t\t}\n\n\t\tmanageTriggerOutside(element);\n\t};\n\n\tvar manageActiveByDefault = function manageActiveByDefault(element) {\n\t\telement.isToggleActive = true;\n\t\tvar className = element.getAttribute(ATTR_CLASS);\n\n\t\tif (!element.hasAttribute(ATTR_TARGET_ONLY) && !element.classList.contains(className)) element.classList.add(className);\n\n\t\tif (element.hasAttribute(ATTR_EXPANDED) && element.getAttribute(ATTR_EXPANDED)) element.setAttribute(ATTR_EXPANDED, true);\n\n\t\tif (element.hasAttribute(ATTR_SELECTED) && !element.getAttribute(ATTR_SELECTED)) element.setAttribute(ATTR_SELECTED, true);\n\n\t\tvar targetElements = retrieveTargets(element);\n\t\tfor (var i = 0; i < targetElements.length; i++) {\n\t\t\tif (!targetElements[i].classList.contains(element.getAttribute(ATTR_CLASS))) targetElements[i].classList.add(className);\n\t\t\tmanageTarget(targetElements[i], element);\n\t\t}\n\n\t\tmanageTriggerOutside(element);\n\t};\n\n\t// Initialization\n\tvar init = function init() {\n\n\t\t// Active by default management\n\t\t[].concat(_toConsumableArray(document.querySelectorAll('[' + ATTR_CLASS + '][' + ATTR_IS_ACTIVE + ']'))).forEach(function (trigger) {\n\t\t\tif (trigger.hasAttribute(ATTR_GROUP)) {\n\t\t\t\tvar group = trigger.getAttribute(ATTR_GROUP);\n\t\t\t\tif (retrieveGroupState(group).length > 0) console.error(\"Toggle group '\" + group + \"' must not have more than one trigger with '\" + ATTR_IS_ACTIVE + \"'\");else manageActiveByDefault(trigger);\n\t\t\t} else {\n\t\t\t\tmanageActiveByDefault(trigger);\n\t\t\t}\n\t\t});\n\n\t\t// Set specified or click event on each trigger element\n\t\t[].concat(_toConsumableArray(document.querySelectorAll('[' + ATTR_CLASS + ']'))).forEach(function (trigger) {\n\t\t\ttrigger.addEventListener(trigger.getAttribute(ATTR_EVENT) || 'click', function (event) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\tif (trigger.hasAttribute(ATTR_GROUP)) manageGroup(trigger);else manageToggle(trigger);\n\t\t\t}, false);\n\t\t});\n\n\t\t// Escape key management\n\t\tvar triggerEscElements = [].concat(_toConsumableArray(document.querySelectorAll('[' + ATTR_CLASS + '][' + ATTR_ESCAPE + ']')));\n\t\tif (triggerEscElements.length > 0) {\n\t\t\tdocument.addEventListener('keyup', function (event) {\n\t\t\t\tevent = event || window.event;\n\t\t\t\tvar isEscape = false;\n\n\t\t\t\tif ('key' in event) isEscape = event.key === 'Escape' || event.key === 'Esc';else isEscape = event.keyCode === 27;\n\n\t\t\t\tif (isEscape) {\n\t\t\t\t\ttriggerEscElements.forEach(function (trigger) {\n\t\t\t\t\t\tif (trigger.isToggleActive) {\n\t\t\t\t\t\t\tif (trigger.hasAttribute(ATTR_GROUP)) console.error(\"You can't use '\" + ATTR_ESCAPE + \"' on a grouped trigger\");else manageToggle(trigger);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}, false);\n\t\t}\n\t};\n\n\tvar onLoad = function onLoad() {\n\t\tinit();\n\t\tdocument.removeEventListener('DOMContentLoaded', onLoad);\n\t};\n\n\tdocument.addEventListener('DOMContentLoaded', onLoad);\n\twindow.initEasyToggleState = init;\n})(document);"]}